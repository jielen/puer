package com.ufgov.zc.client.component.ui.fieldeditor;import java.awt.Dimension;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.io.Serializable;import javax.swing.JComponent;import javax.swing.JTextField;import com.ufgov.zc.client.component.RegexDocument;import com.ufgov.zc.client.component.TextAreaUtil;import com.ufgov.zc.common.cp.model.CpVoucher;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.ZcBaseBill;public class TextFieldEditor extends AbstractFieldEditor {  /**   *    */  private static final long serialVersionUID = -5968471153918487258L;  private JTextField field;  private int maxLength = 60;  public TextFieldEditor(String name) {    super(name);  }  @Override  public Object getValue() {    return field.getText();  }  @Override  public void setValue(Object value) {    if (value == null) {      field.setText(null);      field.setToolTipText(null);    } else if (value instanceof ZcBaseBill) {      Object vt = BeanUtil.get(fieldName, value);      String v = null;      if (vt == null) {        v = null;      } else {        v = vt.toString();      }      field.setText(v);      if (v == null || v.trim().equals("")) {        field.setToolTipText(null);      } else {        field.setToolTipText(v);      }    } else if(value instanceof String){      String v = (String) value;      field.setText(v);      if (v == null || v.trim().equals("")) {        field.setToolTipText(null);      } else {        field.setToolTipText(v);      }    } else if (value instanceof Serializable) {      String v = (String) BeanUtil.get(fieldName, value);      field.setText(v);      if (v == null || v.trim().equals("")) {        field.setToolTipText(null);      } else {        field.setToolTipText(v);      }    }  }  @Override  protected JComponent createEditorComponent() {    field = new JTextField(45);    RegexDocument rd = new RegexDocument();    rd.setMaxLength(this.maxLength);    field.setDocument(rd);    TextAreaUtil.AddRightMouseUtil(field);    field.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        syncEditObject();      }    });    if (this.occCol > 1) {      field.setPreferredSize(new Dimension(120 * this.occCol, 24));    }    return field;  }  protected void syncEditObject() {    System.out.println("syncEditObject():"+field.getText());    if (getEditObject() != null) {      if ("".equals(field.getText())) {        BeanUtil.set(fieldName, null, getEditObject());      } else {        BeanUtil.set(fieldName, field.getText(), getEditObject());      }    }    this.fireEditSynced();  }  @Override  public void setFieldEditorCode() {    // TCJLODO Auto-generated method stub  }}